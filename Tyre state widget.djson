{"Variables":{"DashboardVariables":[{"VariableName":"forceShowTemp","EvaluateOnlyOnce":true,"OverrideWithParentDashboardVariableWhenAvailable":true,"ValueExpression":{"Expression":"False"},"EvaluateBeforeScreenRoles":false}]},"DashboardDebugManager":{},"Version":2,"Id":"bb422922-2c91-4a5c-9b3c-1684903ee0f3","BaseHeight":768,"BaseWidth":1280,"BackgroundColor":"#FF000000","Screens":[{"RenderingSkip":0,"Name":"TempCritical","InGameScreen":false,"IdleScreen":false,"PitScreen":false,"ScreenId":"38dd5928-a39e-47a2-bed4-bb808f72ca41","BackgroundLayerScreenId":"428dad40-e544-4677-8a7f-4fdce798e357","AllowOverlays":true,"IsForegroundLayer":false,"IsOverlayLayer":true,"OverlayTriggerExpression":{"Expression":"[variable.forceShowTemp]"},"ScreenEnabledExpression":{"Expression":""},"OverlayMaxDuration":0,"OverlayMinDuration":0,"IsBackgroundLayer":false,"BackgroundColor":"#00FFFFFF","Items":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.BuiltIn.TyreTemperatureText, SimHub.Plugins","DisplayedTyre":3,"Format":"0","NoDataText":"N/A","TextAfterValue":"째","IsTextItem":true,"Font":"Arial","FontSize":80.0,"TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":100.0,"Left":663.0,"Top":668.0,"Visible":true,"BlinkPhasisInverted":false,"Width":160.0,"IsFreezed":true,"Name":"RR Temp","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property: tyreTypeProperty, getFinalValue: getFinalTyreTypeValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"tyres\", \"rrType\", root);\r\n\r\nconst tyreTypeRawValue = $prop(tyreTypeProperty);\r\nconst tyreType = tyreTypeRawValue ? getFinalTyreTypeValue(tyreTypeRawValue) : null;\r\nconst currentTyre = tyreType || \"rr\";\r\n\r\nconst { tyreMetric, selectedProperty, tyreMetricGameProperty } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, \"rr\", \"temp\", currentTyre, root);\r\n\r\nconst { property, getFinalValue, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", selectedProperty, tyreMetric, false, currentTyre);\r\n\r\nconst rawValue = $prop(property);\r\n\r\nconst value = getFinalValue(rawValue);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\r\nconst tyreMetricGameValue = $prop(tyreMetricGameProperty);\r\n\r\nconst optimalValue = tyreMetricGameValue || optimal;\r\n\r\nconst distance = Math.abs(optimalValue - value);\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.BuiltIn.TyreTemperatureText, SimHub.Plugins","DisplayedTyre":2,"Format":"0","NoDataText":"N/A","TextAfterValue":"째","IsTextItem":true,"Font":"Arial","FontSize":80.0,"TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":100.0,"Left":466.0,"Top":668.0,"Visible":true,"BlinkPhasisInverted":false,"Width":160.0,"IsFreezed":true,"Name":"RL Temp","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property: tyreTypeProperty, getFinalValue: getFinalTyreTypeValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"tyres\", \"rlType\", root);\r\n\r\nconst tyreTypeRawValue = $prop(tyreTypeProperty);\r\nconst tyreType = tyreTypeRawValue ? getFinalTyreTypeValue(tyreTypeRawValue) : null;\r\nconst currentTyre = tyreType || \"rl\";\r\n\r\nconst { tyreMetric, selectedProperty, tyreMetricGameProperty } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, \"rl\", \"temp\", currentTyre, root);\r\n\r\nconst { property, getFinalValue, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", selectedProperty, tyreMetric, root, currentTyre);\r\n\r\nconst rawValue = $prop(property);\r\n\r\nconst value = getFinalValue(rawValue);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\r\nconst tyreMetricGameValue = $prop(tyreMetricGameProperty);\r\n\r\nconst optimalValue = tyreMetricGameValue || optimal;\r\n\r\nconst distance = Math.abs(optimalValue - value);\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.BuiltIn.TyreTemperatureText, SimHub.Plugins","DisplayedTyre":1,"Format":"0","NoDataText":"N/A","TextAfterValue":"째","IsTextItem":true,"Font":"Arial","FontSize":80.0,"TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":100.0,"Left":663.0,"Top":519.0,"Visible":true,"BlinkPhasisInverted":false,"Width":160.0,"IsFreezed":true,"Name":"FR Temp","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property: tyreTypeProperty, getFinalValue: getFinalTyreTypeValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"tyres\", \"frType\", root);\r\n\r\nconst tyreTypeRawValue = $prop(tyreTypeProperty);\r\nconst tyreType = tyreTypeRawValue ? getFinalTyreTypeValue(tyreTypeRawValue) : null;\r\nconst currentTyre = tyreType || \"fr\";\r\n\r\nconst { tyreMetric, selectedProperty, tyreMetricGameProperty } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, \"fr\", \"temp\", currentTyre, root);\r\n\r\nconst { property, getFinalValue, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", selectedProperty, tyreMetric, root, currentTyre);\r\n\r\nconst rawValue = $prop(property);\r\n\r\nconst value = getFinalValue(rawValue);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\r\nconst tyreMetricGameValue = $prop(tyreMetricGameProperty);\r\n\r\nconst optimalValue = tyreMetricGameValue || optimal;\r\n\r\nconst distance = Math.abs(optimalValue - value);\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.BuiltIn.TyreTemperatureText, SimHub.Plugins","DisplayedTyre":0,"Format":"0","NoDataText":"N/A","TextAfterValue":"째","IsTextItem":true,"Font":"Arial","FontSize":80.0,"TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":100.0,"Left":466.0,"Top":519.0,"Visible":true,"BlinkPhasisInverted":false,"Width":160.0,"IsFreezed":true,"Name":"FL Temp","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property: tyreTypeProperty, getFinalValue: getFinalTyreTypeValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"tyres\", \"flType\", root);\r\n\r\nconst tyreTypeRawValue = $prop(tyreTypeProperty);\r\nconst tyreType = tyreTypeRawValue ? getFinalTyreTypeValue(tyreTypeRawValue) : null;\r\nconst currentTyre = tyreType || \"fl\";\r\n\r\nconst { tyreMetric, selectedProperty, tyreMetricGameProperty } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, \"fl\", \"temp\", currentTyre, root);\r\n\r\nconst { property, getFinalValue, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", selectedProperty, tyreMetric, root, currentTyre);\r\n\r\nconst rawValue = $prop(property);\r\n\r\nconst value = getFinalValue(rawValue);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\r\nconst tyreMetricGameValue = $prop(tyreMetricGameProperty);\r\n\r\nconst optimalValue = tyreMetricGameValue || optimal;\r\n\r\nconst distance = Math.abs(optimalValue - value);\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}}],"Visible":true,"BlinkPhasisInverted":false,"Name":"Temperature","RenderingSkip":30,"MinimumRefreshIntervalMS":300.0,"Bindings":{"Visible":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { useTemperature } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, \"fl\", undefined, root);\r\n\r\nconst temperatureIsCritical = TYRES.some((tyre) => isTemperatureCritical(currentGame, carClass, carId, tyre, root));\r\n\r\nreturn useTemperature || temperatureIsCritical;","PreExpression":"const config = loadFromConfig(root);\r\nconst TYRES = [\"fl\", \"fr\", \"rl\", \"rr\"];\r\nconst isTemperatureCritical = (currentGame, carClass, carId, tyre, root) => {\r\n\tconst { property: tyreTypeProperty, getFinalValue: getFinalTyreTypeValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"tyres\", tyre + \"Type\", root);\r\n\t\r\n\tconst tyreTypeRawValue = $prop(tyreTypeProperty);\r\n\tconst tyreType = getFinalTyreTypeValue(tyreTypeRawValue);\r\n\t\r\n\tconst { tyreMetric, selectedProperty, tyreMetricGameProperty } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, tyre, \"temp\", tyreType, root);\r\n\t\r\n\tconst { property, getFinalValue, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", selectedProperty, tyreMetric, root);\r\n\t\r\n\tconst rawValue = $prop(property);\r\n\t\r\n\tconst value = getFinalValue(rawValue);\r\n\t\r\n\tconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\t\r\n\tconst tyreMetricGameValue = $prop(tyreMetricGameProperty);\r\n\t\r\n\tconst optimalValue = tyreMetricGameValue || optimal;\r\n\t\r\n\tconst temperatureIsCritical = (value - (optimal + criticalThreshold)) > 0;\r\n\t\r\n\treturn temperatureIsCritical;\r\n}"},"Mode":2}}}],"Visible":true,"BlinkPhasisInverted":false,"Name":"Primary metric","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0}],"Visible":true,"BlinkPhasisInverted":false,"Name":"Tyres","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0}],"MinimumRefreshIntervalMS":0.0},{"RenderingSkip":0,"Name":"Pres","InGameScreen":true,"IdleScreen":true,"PitScreen":true,"ScreenId":"74b016c2-ee6f-4a12-b959-02aa4fb380f1","BackgroundLayerScreenId":"428dad40-e544-4677-8a7f-4fdce798e357","AllowOverlays":true,"IsForegroundLayer":false,"IsOverlayLayer":false,"OverlayTriggerExpression":{"Expression":"[variable.activeTyreMetric] == 'pres'"},"ScreenEnabledExpression":{"Expression":""},"OverlayMaxDuration":0,"OverlayMinDuration":0,"IsBackgroundLayer":false,"BackgroundColor":"#00FFFFFF","Items":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.BuiltIn.TyrePressureText, SimHub.Plugins","DisplayedTyre":3,"Format":"0.0","NoDataText":"N/A","TextAfterValue":"","IsTextItem":true,"Font":"Arial","FontSize":80.0,"TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":100.0,"Left":663.0,"Top":666.0,"Visible":true,"BlinkPhasisInverted":false,"Width":160.0,"IsFreezed":true,"Name":"RR Press","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property: tyreTypeProperty, getFinalValue: getFinalTyreTypeValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"tyres\", \"rrType\", root);\r\n\r\nconst tyreTypeRawValue = $prop(tyreTypeProperty);\r\nconst tyreType = tyreTypeRawValue ? getFinalTyreTypeValue(tyreTypeRawValue) : null;\r\nconst currentTyre = tyreType || \"rr\";\r\n\r\nconst { tyreMetric, selectedProperty, tyreMetricGameProperty } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, \"rr\", \"pres\", currentTyre, root);\r\n\r\nconst { property, getFinalValue, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", selectedProperty, tyreMetric, root, currentTyre);\r\n\r\nconst rawValue = $prop(property);\r\n\r\nconst value = getFinalValue(rawValue);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\r\nconst tyreMetricGameValue = $prop(tyreMetricGameProperty);\r\n\r\nconst optimalValue = tyreMetricGameValue || optimal;\r\n\r\nconst distance = Math.abs(optimalValue - value);\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.BuiltIn.TyrePressureText, SimHub.Plugins","DisplayedTyre":2,"Format":"0.0","NoDataText":"N/A","TextAfterValue":"","IsTextItem":true,"Font":"Arial","FontSize":80.0,"TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":100.0,"Left":466.0,"Top":668.0,"Visible":true,"BlinkPhasisInverted":false,"Width":160.0,"IsFreezed":true,"Name":"RL Press","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property: tyreTypeProperty, getFinalValue: getFinalTyreTypeValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"tyres\", \"rlType\", root);\r\n\r\nconst tyreTypeRawValue = $prop(tyreTypeProperty);\r\nconst tyreType = tyreTypeRawValue ? getFinalTyreTypeValue(tyreTypeRawValue) : null;\r\nconst currentTyre = tyreType || \"rl\";\r\n\r\nconst { tyreMetric, selectedProperty, tyreMetricGameProperty } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, \"rl\", \"pres\", currentTyre, root);\r\n\r\nconst { property, getFinalValue, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", selectedProperty, tyreMetric, root, currentTyre);\r\n\r\nconst rawValue = $prop(property);\r\n\r\nconst value = getFinalValue(rawValue);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\r\nconst tyreMetricGameValue = $prop(tyreMetricGameProperty);\r\n\r\nconst optimalValue = tyreMetricGameValue || optimal;\r\n\r\nconst distance = Math.abs(optimalValue - value);\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);\r\n"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.BuiltIn.TyrePressureText, SimHub.Plugins","DisplayedTyre":1,"Format":"0.0","NoDataText":"N/A","TextAfterValue":"","IsTextItem":true,"Font":"Arial","FontSize":80.0,"TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":100.0,"Left":663.0,"Top":519.0,"Visible":true,"BlinkPhasisInverted":false,"Width":160.0,"IsFreezed":true,"Name":"FR Press","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property: tyreTypeProperty, getFinalValue: getFinalTyreTypeValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"tyres\", \"frType\", root);\r\n\r\nconst tyreTypeRawValue = $prop(tyreTypeProperty);\r\nconst tyreType = tyreTypeRawValue ? getFinalTyreTypeValue(tyreTypeRawValue) : null;\r\nconst currentTyre = tyreType || \"fr\";\r\n\r\nconst { tyreMetric, selectedProperty, tyreMetricGameProperty } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, \"fr\", \"pres\", currentTyre, root);\r\n\r\nconst { property, getFinalValue, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", selectedProperty, tyreMetric, false, currentTyre);\r\n\r\nconst rawValue = $prop(property);\r\n\r\nconst value = getFinalValue(rawValue);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\r\nconst tyreMetricGameValue = $prop(tyreMetricGameProperty);\r\n\r\nconst optimalValue = tyreMetricGameValue || optimal;\r\n\r\nconst distance = Math.abs(optimalValue - value);\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.BuiltIn.TyrePressureText, SimHub.Plugins","DisplayedTyre":0,"Format":"0.0","NoDataText":"N/A","TextAfterValue":"","IsTextItem":true,"Font":"Arial","FontSize":80.0,"TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":100.0,"Left":466.0,"Top":519.0,"Visible":true,"BlinkPhasisInverted":false,"Width":160.0,"IsFreezed":true,"Name":"FL Press","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property: tyreTypeProperty, getFinalValue: getFinalTyreTypeValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"tyres\", \"flType\", root);\r\n\r\nconst tyreTypeRawValue = $prop(tyreTypeProperty);\r\nconst tyreType = tyreTypeRawValue ? getFinalTyreTypeValue(tyreTypeRawValue) : null;\r\nconst currentTyre = tyreType || \"fl\";\r\n\r\nconst { tyreMetric, selectedProperty, tyreMetricGameProperty } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, \"fl\", \"pres\", currentTyre, root);\r\n\r\nconst { property, getFinalValue, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", selectedProperty, tyreMetric, root, currentTyre);\r\n\r\nconst rawValue = $prop(property);\r\n\r\nconst value = getFinalValue(rawValue);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\r\nconst tyreMetricGameValue = $prop(tyreMetricGameProperty);\r\n\r\nconst optimalValue = tyreMetricGameValue || optimal;\r\n\r\nconst distance = Math.abs(optimalValue - value);\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}}],"Visible":true,"BlinkPhasisInverted":false,"Name":"Pressure","RenderingSkip":15,"MinimumRefreshIntervalMS":150.0,"Bindings":{"Visible":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { useTemperature } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, \"fl\", undefined, root);\r\n\r\nconst temperatureIsCritical = TYRES.some((tyre) => isTemperatureCritical(currentGame, carClass, carId, tyre, root));\r\n\r\nreturn !temperatureIsCritical;","PreExpression":"const config = loadFromConfig(root);\r\nconst TYRES = [\"fl\", \"fr\", \"rl\", \"rr\"];\r\nconst isTemperatureCritical = (currentGame, carClass, carId, tyre) => {\r\n\tconst { property: tyreTypeProperty, getFinalValue: getFinalTyreTypeValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"tyres\", tyre + \"Type\", root);\r\n\t\r\n\tconst tyreTypeRawValue = $prop(tyreTypeProperty);\r\n\tconst tyreType = getFinalTyreTypeValue(tyreTypeRawValue);\r\n\t\r\n\tconst { tyreMetric, selectedProperty, tyreMetricGameProperty } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, tyre, \"temp\", tyreType, root);\r\n\t\r\n\tconst { property, getFinalValue, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", selectedProperty, tyreMetric);\r\n\t\r\n\tconst rawValue = $prop(property);\r\n\t\r\n\tconst value = getFinalValue(rawValue);\r\n\t\r\n\tconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\t\r\n\tconst tyreMetricGameValue = $prop(tyreMetricGameProperty);\r\n\t\r\n\tconst optimalValue = tyreMetricGameValue || optimal;\r\n\t\r\n\tconst temperatureIsCritical = (value - (optimal + criticalThreshold)) > 0;\r\n\t\r\n\treturn temperatureIsCritical;\r\n}"},"Mode":2}}}],"Visible":true,"BlinkPhasisInverted":false,"Name":"Primary metric","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0}],"Visible":true,"BlinkPhasisInverted":false,"Name":"Tyres","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0}],"MinimumRefreshIntervalMS":0.0},{"RenderingSkip":0,"Name":"Temp","InGameScreen":true,"IdleScreen":true,"PitScreen":true,"ScreenId":"0a8bb6ca-221b-4cfb-af7f-106eedfccdad","BackgroundLayerScreenId":"428dad40-e544-4677-8a7f-4fdce798e357","AllowOverlays":true,"IsForegroundLayer":false,"IsOverlayLayer":false,"OverlayTriggerExpression":{"Expression":""},"ScreenEnabledExpression":{"Expression":""},"OverlayMaxDuration":0,"OverlayMinDuration":0,"IsBackgroundLayer":false,"BackgroundColor":"#00FFFFFF","Items":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.BuiltIn.TyreTemperatureText, SimHub.Plugins","DisplayedTyre":3,"Format":"0","NoDataText":"N/A","TextAfterValue":"째","IsTextItem":true,"Font":"Arial","FontSize":80.0,"TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":100.0,"Left":663.0,"Top":668.0,"Visible":true,"BlinkPhasisInverted":false,"Width":160.0,"IsFreezed":true,"Name":"RR Temp","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property: tyreTypeProperty, getFinalValue: getFinalTyreTypeValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"tyres\", \"rrType\", root);\r\n\r\nconst tyreTypeRawValue = $prop(tyreTypeProperty);\r\nconst tyreType = tyreTypeRawValue ? getFinalTyreTypeValue(tyreTypeRawValue) : null;\r\nconst currentTyre = tyreType || \"rr\";\r\n\r\nconst { tyreMetric, selectedProperty, tyreMetricGameProperty } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, \"rr\", \"temp\", currentTyre, root);\r\n\r\nconst { property, getFinalValue, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", selectedProperty, tyreMetric, false, currentTyre);\r\n\r\nconst rawValue = $prop(property);\r\n\r\nconst value = getFinalValue(rawValue);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\r\nconst tyreMetricGameValue = $prop(tyreMetricGameProperty);\r\n\r\nconst optimalValue = tyreMetricGameValue || optimal;\r\n\r\nconst distance = Math.abs(optimalValue - value);\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.BuiltIn.TyreTemperatureText, SimHub.Plugins","DisplayedTyre":2,"Format":"0","NoDataText":"N/A","TextAfterValue":"째","IsTextItem":true,"Font":"Arial","FontSize":80.0,"TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":100.0,"Left":466.0,"Top":668.0,"Visible":true,"BlinkPhasisInverted":false,"Width":160.0,"IsFreezed":true,"Name":"RL Temp","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property: tyreTypeProperty, getFinalValue: getFinalTyreTypeValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"tyres\", \"rlType\", root);\r\n\r\nconst tyreTypeRawValue = $prop(tyreTypeProperty);\r\nconst tyreType = tyreTypeRawValue ? getFinalTyreTypeValue(tyreTypeRawValue) : null;\r\nconst currentTyre = tyreType || \"rl\";\r\n\r\nconst { tyreMetric, selectedProperty, tyreMetricGameProperty } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, \"rl\", \"temp\", currentTyre, root);\r\n\r\nconst { property, getFinalValue, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", selectedProperty, tyreMetric, root, currentTyre);\r\n\r\nconst rawValue = $prop(property);\r\n\r\nconst value = getFinalValue(rawValue);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\r\nconst tyreMetricGameValue = $prop(tyreMetricGameProperty);\r\n\r\nconst optimalValue = tyreMetricGameValue || optimal;\r\n\r\nconst distance = Math.abs(optimalValue - value);\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.BuiltIn.TyreTemperatureText, SimHub.Plugins","DisplayedTyre":1,"Format":"0","NoDataText":"N/A","TextAfterValue":"째","IsTextItem":true,"Font":"Arial","FontSize":80.0,"TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":100.0,"Left":663.0,"Top":519.0,"Visible":true,"BlinkPhasisInverted":false,"Width":160.0,"IsFreezed":true,"Name":"FR Temp","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property: tyreTypeProperty, getFinalValue: getFinalTyreTypeValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"tyres\", \"frType\", root);\r\n\r\nconst tyreTypeRawValue = $prop(tyreTypeProperty);\r\nconst tyreType = tyreTypeRawValue ? getFinalTyreTypeValue(tyreTypeRawValue) : null;\r\nconst currentTyre = tyreType || \"fr\";\r\n\r\nconst { tyreMetric, selectedProperty, tyreMetricGameProperty } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, \"fr\", \"temp\", currentTyre, root);\r\n\r\nconst { property, getFinalValue, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", selectedProperty, tyreMetric, root, currentTyre);\r\n\r\nconst rawValue = $prop(property);\r\n\r\nconst value = getFinalValue(rawValue);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\r\nconst tyreMetricGameValue = $prop(tyreMetricGameProperty);\r\n\r\nconst optimalValue = tyreMetricGameValue || optimal;\r\n\r\nconst distance = Math.abs(optimalValue - value);\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.BuiltIn.TyreTemperatureText, SimHub.Plugins","DisplayedTyre":0,"Format":"0","NoDataText":"N/A","TextAfterValue":"째","IsTextItem":true,"Font":"Arial","FontSize":80.0,"TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":100.0,"Left":466.0,"Top":519.0,"Visible":true,"BlinkPhasisInverted":false,"Width":160.0,"IsFreezed":true,"Name":"FL Temp","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property: tyreTypeProperty, getFinalValue: getFinalTyreTypeValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"tyres\", \"flType\", root);\r\n\r\nconst tyreTypeRawValue = $prop(tyreTypeProperty);\r\nconst tyreType = tyreTypeRawValue ? getFinalTyreTypeValue(tyreTypeRawValue) : null;\r\nconst currentTyre = tyreType || \"fl\";\r\n\r\nconst { tyreMetric, selectedProperty, tyreMetricGameProperty } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, \"fl\", \"temp\", currentTyre, root);\r\n\r\nconst { property, getFinalValue, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", selectedProperty, tyreMetric, root, currentTyre);\r\n\r\nconst rawValue = $prop(property);\r\n\r\nconst value = getFinalValue(rawValue);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\r\nconst tyreMetricGameValue = $prop(tyreMetricGameProperty);\r\n\r\nconst optimalValue = tyreMetricGameValue || optimal;\r\n\r\nconst distance = Math.abs(optimalValue - value);\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}}],"Visible":true,"BlinkPhasisInverted":false,"Name":"Temperature","RenderingSkip":30,"MinimumRefreshIntervalMS":300.0,"Bindings":{"Visible":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { useTemperature } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, \"fl\", undefined, root);\r\n\r\nconst temperatureIsCritical = TYRES.some((tyre) => isTemperatureCritical(currentGame, carClass, carId, tyre, root));\r\n\r\nreturn !temperatureIsCritical;","PreExpression":"const config = loadFromConfig(root);\r\nconst TYRES = [\"fl\", \"fr\", \"rl\", \"rr\"];\r\nconst isTemperatureCritical = (currentGame, carClass, carId, tyre, root) => {\r\n\tconst { property: tyreTypeProperty, getFinalValue: getFinalTyreTypeValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"tyres\", tyre + \"Type\", root);\r\n\t\r\n\tconst tyreTypeRawValue = $prop(tyreTypeProperty);\r\n\tconst tyreType = getFinalTyreTypeValue(tyreTypeRawValue);\r\n\t\r\n\tconst { tyreMetric, selectedProperty, tyreMetricGameProperty } = getPrimaryTyreMetricFromConfig(config, currentGame, carClass, carId, tyre, \"temp\", tyreType, root);\r\n\t\r\n\tconst { property, getFinalValue, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", selectedProperty, tyreMetric, root);\r\n\t\r\n\tconst rawValue = $prop(property);\r\n\t\r\n\tconst value = getFinalValue(rawValue);\r\n\t\r\n\tconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\t\r\n\tconst tyreMetricGameValue = $prop(tyreMetricGameProperty);\r\n\t\r\n\tconst optimalValue = tyreMetricGameValue || optimal;\r\n\t\r\n\tconst temperatureIsCritical = (value - (optimal + criticalThreshold)) > 0;\r\n\t\r\n\treturn temperatureIsCritical;\r\n}"},"Mode":2}}}],"Visible":true,"BlinkPhasisInverted":false,"Name":"Primary metric","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0}],"Visible":true,"BlinkPhasisInverted":false,"Name":"Tyres","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0}],"MinimumRefreshIntervalMS":0.0},{"RenderingSkip":0,"Name":"Wear + brakes","InGameScreen":false,"IdleScreen":false,"PitScreen":false,"ScreenId":"428dad40-e544-4677-8a7f-4fdce798e357","ForegroundLayerScreenId":"74b016c2-ee6f-4a12-b959-02aa4fb380f1","AllowOverlays":true,"IsForegroundLayer":false,"IsOverlayLayer":false,"OverlayTriggerExpression":{"Expression":""},"ScreenEnabledExpression":{"Expression":""},"OverlayMaxDuration":0,"OverlayMinDuration":0,"IsBackgroundLayer":true,"BackgroundColor":"#FF000000","Items":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#C80A49A9","BorderStyle":{"BorderTop":2,"BorderBottom":2,"BorderLeft":2,"BorderRight":2},"Height":150.0,"Left":639.0,"Top":609.0,"Visible":true,"BlinkPhasisInverted":false,"Width":200.0,"Name":"RR Rect","RenderingSkip":30,"MinimumRefreshIntervalMS":300.0,"Bindings":{"BackgroundColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('CurrentGame');\r\nconst currentClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { color: limiterColor, defaultBackground} = getThemeColorValueFromConfig(config, currentGame, currentClass, carId, \"limiter\", root);\r\n\r\nconst { color: drsColor } = getThemeColorValueFromConfig(config, currentGame, currentClass, carId, \"drsActive\", root);\r\n\r\nconst { color: drsAvailableColor } = getThemeColorValueFromConfig(config, currentGame, currentClass, carId, \"drsAvailable\", root);\r\n\r\nconst { property: limiterProp } = getPropertyValueFromConfig(config, currentGame, currentClass, carId, \"misc\", \"limiter\", root);\r\n\r\nconst { property: drsProp } = getPropertyValueFromConfig(config, currentGame, currentClass, carId, \"misc\", \"drsActive\", root);\r\n\r\nconst { property: drsAvailableProp } = getPropertyValueFromConfig(config, currentGame, currentClass, carId, \"misc\", \"drsAvailable\", root);\r\n\r\n\r\nconst isLimiterActive = $prop(limiterProp);\r\nconst isDrsActive = $prop(drsProp);\r\nconst isDrsAvailable = $prop(drsAvailableProp);\r\n\r\nif(isLimiterActive) {\r\n\treturn limiterColor;\r\n}\r\n\r\nif(isDrsActive) {\r\n\treturn drsColor;\r\n}\r\n\r\nif(isDrsAvailable) {\r\n\treturn drsAvailableColor;\r\n}\r\n\r\nreturn defaultBackground;","PreExpression":"const config = loadFromConfig(root);\r\n"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#C80A49A9","BorderStyle":{"BorderTop":2,"BorderBottom":2,"BorderLeft":2,"BorderRight":2},"Height":150.0,"Left":441.0,"Top":609.0,"Visible":true,"BlinkPhasisInverted":false,"Width":200.0,"Name":"RL Rect","RenderingSkip":30,"MinimumRefreshIntervalMS":300.0,"Bindings":{"BackgroundColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('CurrentGame');\r\nconst currentClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { color: limiterColor, defaultBackground} = getThemeColorValueFromConfig(config, currentGame, currentClass, carId, \"limiter\", root);\r\n\r\nconst { color: drsColor } = getThemeColorValueFromConfig(config, currentGame, currentClass, carId, \"drsActive\", root);\r\n\r\nconst { color: drsAvailableColor } = getThemeColorValueFromConfig(config, currentGame, currentClass, carId, \"drsAvailable\", root);\r\n\r\nconst { property: limiterProp } = getPropertyValueFromConfig(config, currentGame, currentClass, carId, \"misc\", \"limiter\", root);\r\n\r\nconst { property: drsProp } = getPropertyValueFromConfig(config, currentGame, currentClass, carId, \"misc\", \"drsActive\", root);\r\n\r\nconst { property: drsAvailableProp } = getPropertyValueFromConfig(config, currentGame, currentClass, carId, \"misc\", \"drsAvailable\", root);\r\n\r\n\r\nconst isLimiterActive = $prop(limiterProp);\r\nconst isDrsActive = $prop(drsProp);\r\nconst isDrsAvailable = $prop(drsAvailableProp);\r\n\r\nif(isLimiterActive) {\r\n\treturn limiterColor;\r\n}\r\n\r\nif(isDrsActive) {\r\n\treturn drsColor;\r\n}\r\n\r\nif(isDrsAvailable) {\r\n\treturn drsAvailableColor;\r\n}\r\n\r\nreturn defaultBackground;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#C80A49A9","BorderStyle":{"BorderTop":2,"BorderBottom":2,"BorderLeft":2,"BorderRight":2},"Height":150.0,"Left":639.0,"Top":460.0,"Visible":true,"BlinkPhasisInverted":false,"Width":200.0,"Name":"FR Rect","RenderingSkip":30,"MinimumRefreshIntervalMS":300.0,"Bindings":{"BackgroundColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('CurrentGame');\r\nconst currentClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { color: limiterColor, defaultBackground} = getThemeColorValueFromConfig(config, currentGame, currentClass, carId, \"limiter\", root);\r\n\r\nconst { color: drsColor } = getThemeColorValueFromConfig(config, currentGame, currentClass, carId, \"drsActive\", root);\r\n\r\nconst { color: drsAvailableColor } = getThemeColorValueFromConfig(config, currentGame, currentClass, carId, \"drsAvailable\", root);\r\n\r\nconst { property: limiterProp } = getPropertyValueFromConfig(config, currentGame, currentClass, carId, \"misc\", \"limiter\", root);\r\n\r\nconst { property: drsProp } = getPropertyValueFromConfig(config, currentGame, currentClass, carId, \"misc\", \"drsActive\", root);\r\n\r\nconst { property: drsAvailableProp } = getPropertyValueFromConfig(config, currentGame, currentClass, carId, \"misc\", \"drsAvailable\", root);\r\n\r\n\r\nconst isLimiterActive = $prop(limiterProp);\r\nconst isDrsActive = $prop(drsProp);\r\nconst isDrsAvailable = $prop(drsAvailableProp);\r\n\r\nif(isLimiterActive) {\r\n\treturn limiterColor;\r\n}\r\n\r\nif(isDrsActive) {\r\n\treturn drsColor;\r\n}\r\n\r\nif(isDrsAvailable) {\r\n\treturn drsAvailableColor;\r\n}\r\n\r\nreturn defaultBackground;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.RectangleItem, SimHub.Plugins","IsRectangleItem":true,"BackgroundColor":"#C80A49A9","BorderStyle":{"BorderTop":2,"BorderBottom":2,"BorderLeft":2,"BorderRight":2},"Height":150.0,"Left":441.0,"Top":460.0,"Visible":true,"BlinkPhasisInverted":false,"Width":200.0,"Name":"FL Rect","RenderingSkip":30,"MinimumRefreshIntervalMS":300.0,"Bindings":{"BackgroundColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('CurrentGame');\r\nconst currentClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { color: limiterColor, defaultBackground} = getThemeColorValueFromConfig(config, currentGame, currentClass, carId, \"limiter\", root);\r\n\r\nconst { color: drsColor } = getThemeColorValueFromConfig(config, currentGame, currentClass, carId, \"drsActive\", root);\r\n\r\nconst { color: drsAvailableColor } = getThemeColorValueFromConfig(config, currentGame, currentClass, carId, \"drsAvailable\", root);\r\n\r\nconst { property: limiterProp } = getPropertyValueFromConfig(config, currentGame, currentClass, carId, \"misc\", \"limiter\", root);\r\n\r\nconst { property: drsProp } = getPropertyValueFromConfig(config, currentGame, currentClass, carId, \"misc\", \"drsActive\", root);\r\n\r\nconst { property: drsAvailableProp } = getPropertyValueFromConfig(config, currentGame, currentClass, carId, \"misc\", \"drsAvailable\", root);\r\n\r\n\r\nconst isLimiterActive = $prop(limiterProp);\r\nconst isDrsActive = $prop(drsProp);\r\nconst isDrsAvailable = $prop(drsAvailableProp);\r\n\r\nif(isLimiterActive) {\r\n\treturn limiterColor;\r\n}\r\n\r\nif(isDrsActive) {\r\n\treturn drsColor;\r\n}\r\n\r\nif(isDrsAvailable) {\r\n\treturn drsAvailableColor;\r\n}\r\n\r\nreturn defaultBackground;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.BuiltIn.TyreWearText, SimHub.Plugins","DisplayedTyre":3,"Format":"0","NoDataText":"N/A","TextAfterValue":"%","IsTextItem":true,"Font":"Arial","FontSize":50.0,"TextColor":"#FFFFFFFF","HorizontalAlignment":2,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":100.0,"Left":713.0,"Top":586.0,"Visible":true,"BlinkPhasisInverted":false,"Width":120.0,"IsFreezed":true,"Name":"RR Wear","RenderingSkip":50,"MinimumRefreshIntervalMS":500.0,"Bindings":{"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property, getFinalValue, transformation, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", \"rrWear\", \"wear\", root, \"rr\");\r\n\r\nconst rawValue = $prop(property);\r\n\r\nconst value = getFinalValue(rawValue);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\nconst distance = Math.abs(optimal - value);\r\n\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.BuiltIn.TyreWearText, SimHub.Plugins","DisplayedTyre":2,"Format":"0","NoDataText":"N/A","TextAfterValue":"%","IsTextItem":true,"Font":"Arial","FontSize":50.0,"TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":100.0,"Left":446.0,"Top":586.0,"Visible":true,"BlinkPhasisInverted":false,"Width":120.0,"IsFreezed":true,"Name":"RL Wear","RenderingSkip":50,"MinimumRefreshIntervalMS":500.0,"Bindings":{"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property, getFinalValue, transformation, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", \"rlWear\", \"wear\", root, \"rl\");\r\n\r\nconst rawValue = $prop(property);\r\n\r\nconst value = getFinalValue(rawValue);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\nconst distance = Math.abs(optimal - value);\r\n\r\n\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.BuiltIn.TyreWearText, SimHub.Plugins","DisplayedTyre":1,"Format":"0","NoDataText":"N/A","TextAfterValue":"%","IsTextItem":true,"Font":"Arial","FontSize":50.0,"TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":100.0,"Left":713.0,"Top":437.0,"Visible":true,"BlinkPhasisInverted":false,"Width":120.0,"IsFreezed":true,"Name":"FR Wear","RenderingSkip":50,"MinimumRefreshIntervalMS":500.0,"Bindings":{"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property, getFinalValue, transformation, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", \"frWear\", \"wear\", root, \"fr\");\r\n\r\nconst rawValue = $prop(property);\r\n\r\nconst value = getFinalValue(rawValue);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\nconst distance = Math.abs(optimal - value);\r\n\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.BuiltIn.TyreWearText, SimHub.Plugins","DisplayedTyre":0,"Format":"0","NoDataText":"N/A","TextAfterValue":"%","IsTextItem":true,"Font":"Arial","FontSize":50.0,"TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":100.0,"Left":446.0,"Top":437.0,"Visible":true,"BlinkPhasisInverted":false,"Width":120.0,"IsFreezed":true,"Name":"FL Wear","RenderingSkip":50,"MinimumRefreshIntervalMS":500.0,"Bindings":{"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property, getFinalValue, transformation, optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"tyres\", \"flWear\", \"wear\", root, \"fl\");\r\n\r\nconst rawValue = $prop(property);\r\n\r\nconst value = getFinalValue(rawValue);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\nconst distance = Math.abs(optimal - value);\r\n\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}}],"Visible":true,"BlinkPhasisInverted":false,"Name":"Tyres","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0,"Bindings":{"Visible":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nreturn !!getMasterSectionLabelFromConfig(config, currentGame, carClass, carId, \"tyres\", root);","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.Layer, SimHub.Plugins","Group":true,"Repetitions":0,"IsFreezed":true,"Childrens":[{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"Font":"Arial","FontSize":40.0,"Text":"405","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":60.0,"Left":642.0,"Top":607.0,"Visible":true,"BlinkPhasisInverted":false,"Width":68.0,"IsFreezed":true,"Name":"RR Brake","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"0","Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property, getFinalValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"brakes\", \"rrTemp\", root);\r\n\r\nconst rawValue = $prop(property);\r\nconst value = getFinalValue(rawValue);\r\n\r\nreturn value;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2},"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property, getFinalValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"brakes\", \"rrTemp\", root);\r\n\r\nconst rawValue = $prop(property);\r\nconst value = getFinalValue(rawValue);\r\n\r\nconst { optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"brakes\", \"rrTemp\", \"temp\", root);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\r\nconst optimalValue = optimal;\r\n\r\nconst distance = Math.abs(optimalValue - value);\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"Font":"Arial","FontSize":40.0,"Text":"405","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":60.0,"Left":569.0,"Top":607.0,"Visible":true,"BlinkPhasisInverted":false,"Width":68.0,"IsFreezed":true,"Name":"RL Brake","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"0","Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property, getFinalValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"brakes\", \"rlTemp\", root);\r\n\r\nconst rawValue = $prop(property);\r\nconst value = getFinalValue(rawValue);\r\n\r\nreturn value;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2},"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property, getFinalValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"brakes\", \"rlTemp\", root);\r\n\r\nconst rawValue = $prop(property);\r\nconst value = getFinalValue(rawValue);\r\n\r\nconst { optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"brakes\", \"rlTemp\", \"temp\", root);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\r\nconst optimalValue = optimal;\r\n\r\nconst distance = Math.abs(optimalValue - value);\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"Font":"Arial","FontSize":40.0,"Text":"405","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":60.0,"Left":642.0,"Top":457.0,"Visible":true,"BlinkPhasisInverted":false,"Width":68.0,"IsFreezed":true,"Name":"FR Brake","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"0","Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property, getFinalValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"brakes\", \"frTemp\", root);\r\n\r\nconst rawValue = $prop(property);\r\nconst value = getFinalValue(rawValue);\r\n\r\nreturn value;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2},"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property, getFinalValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"brakes\", \"frTemp\", root);\r\n\r\nconst rawValue = $prop(property);\r\nconst value = getFinalValue(rawValue);\r\n\r\nconst { optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"brakes\", \"frTemp\", \"temp\", root);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\r\nconst optimalValue = optimal;\r\n\r\nconst distance = Math.abs(optimalValue - value);\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}},{"$type":"SimHub.Plugins.OutputPlugins.GraphicalDash.Models.TextItem, SimHub.Plugins","IsTextItem":true,"Font":"Arial","FontSize":40.0,"Text":"405","TextColor":"#FFFFFFFF","HorizontalAlignment":1,"VerticalAlignment":1,"BackgroundColor":"#00FFFFFF","Height":60.0,"Left":569.0,"Top":457.0,"Visible":true,"BlinkPhasisInverted":false,"Width":68.0,"IsFreezed":true,"Name":"FL Brake","RenderingSkip":0,"MinimumRefreshIntervalMS":0.0,"Bindings":{"Text":{"FormatString":"0","Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property, getFinalValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"brakes\", \"flTemp\", root);\r\n\r\nconst rawValue = $prop(property);\r\nconst value = getFinalValue(rawValue);\r\n\r\nreturn value;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2},"TextColor":{"Formula":{"JSExt":1,"Interpreter":1,"Expression":"const currentGame = $prop('DataCorePlugin.CurrentGame');\r\nconst carClass = $prop('CarClass');\r\nconst carId = $prop('CarId');\r\n\r\nconst { property, getFinalValue } = getPropertyValueFromConfig(config, currentGame, carClass, carId, \"brakes\", \"flTemp\", root);\r\n\r\nconst rawValue = $prop(property);\r\nconst value = getFinalValue(rawValue);\r\n\r\nconst { optimalRanges } = getPropertyOptimalRangesFromConfig(config, currentGame, carClass, carId, \"brakes\", \"flTemp\", \"temp\", root);\r\n\r\nif(!optimalRanges) {\r\n\treturn 2;\r\n}\r\n\r\nconst { optimal, goodThreshold, criticalThreshold } = optimalRanges;\r\n\r\nconst optimalValue = optimal;\r\n\r\nconst distance = Math.abs(optimalValue - value);\r\n\r\nconst { color: optimalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"optimal\");\r\n\r\nconst { color: goodColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"good\");\r\n\r\nconst { color: criticalColor } = getThemeColorValueFromConfig(config, currentGame, carClass, carId, \"critical\");\r\n\r\nif(distance < goodThreshold) {\r\n\treturn optimalColor;\r\n}\r\n\r\nif(distance < criticalThreshold) {\r\n\treturn goodColor;\r\n}\r\n\r\nreturn criticalColor;","PreExpression":"const config = loadFromConfig(root);"},"Mode":2}}}],"Visible":true,"BlinkPhasisInverted":false,"Name":"Brakes","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0}],"Visible":true,"BlinkPhasisInverted":false,"Name":"Wheels","RenderingSkip":10,"MinimumRefreshIntervalMS":100.0}],"MinimumRefreshIntervalMS":0.0}],"SnapToGrid":false,"HideLabels":false,"ShowForeground":true,"ForegroundOpacity":100.0,"ShowBackground":true,"BackgroundOpacity":100.0,"ShowBoundingRectangles":false,"GridSize":10,"Images":[],"Metadata":{"ScreenCount":4.0,"InGameScreensIndexs":[1,2],"IdleScreensIndexs":[1,2],"MainPreviewIndex":1,"IsOverlay":false,"OverlaySizeWarning":true,"MetadataVersion":2.0,"EnableOnDashboardMessaging":true,"PitScreensIndexs":[1,2],"SimHubVersion":"9.9.3","Width":1280.0,"Height":768.0,"DashboardVersion":""},"ShowOnScreenControls":true,"IsOverlay":false,"EnableClickThroughOverlay":true,"EnableOnDashboardMessaging":true,"UseStrictJSIsolation":false,"UseStrictJSIsolationWarning":true}